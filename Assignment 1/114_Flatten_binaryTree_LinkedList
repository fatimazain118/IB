class Solution
{
public
    void flatten(TreeNode root)
    {

        //this will run in T.C- O(n) and S.C - O(1)

        if (root == null)
            return;
        while (root != null)
        {
            if (root.left != null)
            {
                TreeNode left = root.left; //variable left
                TreeNode current = left;
                while (current.right != null)
                    current = current.right;
                current.right = root.right; //Morris Traversal main step
                root.left = null;
                root.right = left;
            }
            root = root.right;
        }
    }
}
________________________________________________________________________________________
class Solution {
public:
    //here T.C--O(n), and S.C -- O(height)
    
    void flatten(TreeNode* root) {
        if(root == NULL) return;
        TreeNode* tempLeft = root->left;
        TreeNode* tempRight = root->right;
        
        root->left = NULL;
        flatten(tempLeft);
        flatten(tempRight);
        
        root->right = tempLeft;
        TreeNode* current = root;
        while(current->right != NULL)
            current = current->right;
        current->right = tempRight;
    }
};
