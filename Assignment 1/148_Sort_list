//uses merge sort T.C-- O(nlogn) and S.C-- O(n)

class Solution
{
public:
    ListNode *sortList(ListNode *head)
    {
        if (head == NULL || head->next == NULL)
            return head;
        ListNode *mid = middleNode(head); //to find middle and break from there
        ListNode *left = sortList(head);
        ListNode *right = sortList(mid);
        return mergeTwoLists(left, right);
    }

public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2)
    {
        ListNode *dummy = new ListNode();
        ListNode *curr = dummy;

        while (l1 != NULL && l2 != NULL)
        {
            if (l1->val <= l2->val)
            {
                curr->next = l1;
                l1 = l1->next;
            }
            else
            {
                curr->next = l2;
                l2 = l2->next;
            }
            curr = curr->next;
        }
        curr->next = l1 != NULL ? l1 : l2;
        return dummy->next;
    }

private:
    ListNode *middleNode(ListNode *head)
    {
        ListNode *slow = head;
        ListNode *fast = head->next;
        while (fast != NULL && fast->next != NULL)
        {
            slow = slow->next;
            fast = fast->next;
        }
        ListNode *mid = slow->next;
        slow->next = NULL;     //to break list from there
        return mid;
    }
};
